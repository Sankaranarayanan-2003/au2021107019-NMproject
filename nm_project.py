# -*- coding: utf-8 -*-
"""NM Project.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1xBvQFxzKrE2ieIPei1ushwRIzx_Edr9c
"""

import pandas as pd
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns

from google.colab import drive
drive.mount('/content/drive')

df = pd.read_csv('/content/drive/MyDrive/corn_data_brazil.csv')

print("Data Preview:")
print(df.head())

df.info
df.isnull().sum()

# Replacing %, "," and "-"
df = df.replace('%', '', regex=True)
df = df.replace(',', '', regex=True)
df = df.replace('-', '', regex=True)
df = df.replace('', np.nan)
df = df.replace('MAY90', np.nan)
# Dropping rows with NaN values
df = df.dropna()
# Check to see if all NaN values are resolved
df.isnull().sum()

# Converting data type to float

lst = ["corn_BRL", "chicken_BRL", "pork_BRL", "cult_area", "corn_prod", "chicken_prod", "pork_prod", "inflation", "usd_brl"]
df = df.replace('', np.nan)
df = df.replace(' ', '')
df[lst] = df[lst].astype('float')
df.dtypes

df.head()

sns.set_style('darkgrid')
plt.rcParams['font.size'] = 14
plt.rcParams['figure.figsize'] = (9, 5)
plt.rcParams['figure.facecolor'] = '#00000000'

#raw-materials list
raw_data=["corn_BRL", "chicken_BRL", "pork_BRL", "cult_area", "corn_prod", "chicken_prod", "pork_prod"]
#getting the correlation matrix
corrmat = df[raw_data].corr()
#setting the size of plot
fig = plt.figure(figsize = (7, 5))
#masking the upper traingle part since matrix is symmetric(repetitive)
mask = np.triu(np.ones_like(corrmat, dtype=bool))
sns.heatmap(corrmat, vmax = .8,mask=mask, square = True, annot = True)
plt.show()

plt.figure(figsize=(7,5))
changelist=["inflation", "int_rate", "usd_brl"]
#generate a correlation matrix for the whole dataset
corrMatrix = df[changelist].corr()
sns.heatmap(corrMatrix, annot=True)
plt.show()

# Conclusion

# A negative value implies that two variables are negatively correlated (one increases, the other decreases);
# Zero implies no relationship;
# Otherwise, the higher the value, the greater the chance of a relationship. */

axes=df[["corn_BRL", "corn_prod"]].plot(figsize=(7, 5), subplots=True, linewidth=1)

changelist=["corn_prod", "chicken_prod", "pork_prod", "inflation", "int_rate", "usd_brl"]
for i in range(len(changelist)):
    plt.figure(figsize=(12,12))
    df[changelist[i]].hist(figsize=(7,5), linewidth=1)
    plt.xlabel('% Change')
    plt.ylabel('count')
    plt.legend(changelist[i:],loc='upper center',bbox_to_anchor=(1.2,1))

plt.figure(figsize=(10, 10))
materialslist=["corn_BRL", "chicken_BRL", "pork_BRL"]
for i in range(len(materialslist)):
    plt.subplot(4,3,i+1)
    plt.subplots_adjust( hspace=1 ,wspace=0.5)
    plt.title(materialslist[i])
    plt.plot(df[materialslist[i]])
    plt.xticks(rotation=90)
plt.suptitle("Raw-Materials comparision")

plt.figure(figsize=(5, 5))
plt.plot(df[["corn_BRL", "chicken_BRL", "pork_BRL"]])
plt.title("Raw-Materials  comparision")
plt.xlabel('Years')
plt.ylabel('Prices')
plt.legend(["corn_BRL", "chicken_BRL", "pork_BRL"],loc='upper center',bbox_to_anchor=(1.2,1))

# Chicken is the low priced material

highlist=["corn_prod", "chicken_prod", "pork_prod"]
plt.figure(figsize=(7,5))
plt.xlabel('Prices')
plt.ylabel('Years')
for i in range(len(highlist)):
    sns.scatterplot(x=df[highlist[i]],y=df.index);
    plt.legend(highlist,loc='upper center',bbox_to_anchor=(1.2,1))

lowlist=["corn_BRL", "chicken_BRL", "pork_BRL"]
for i in range(3):
    #plt.title(lowlist[i])
    plt.subplot(2, 3, i+1)
    plt.subplots_adjust( hspace=0.5 )
    sns.boxplot(x=df[lowlist[i]])